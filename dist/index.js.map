{"version":3,"sources":["../src/index.ts","../src/genapi-chat-language-model.ts","../src/convert-to-genapi-chat-messages.ts","../src/get-response-metadata.ts","../src/map-genapi-finish-reason.ts","../src/genapi-error.ts","../src/genapi-prepare-tools.ts","../src/genapi-completion-language-model.ts","../src/convert-to-genapi-completion-prompt.ts","../src/genapi-embedding-model.ts","../src/genapi-provider.ts"],"sourcesContent":["export { GenApiChatLanguageModel } from './genapi-chat-language-model'\nexport type { GenApiChatSettings } from './genapi-chat-settings'\nexport { GenApiCompletionLanguageModel } from './genapi-completion-language-model'\nexport type { GenApiCompletionSettings } from './genapi-completion-settings'\nexport { GenApiEmbeddingModel } from './genapi-embedding-model'\nexport type { GenApiEmbeddingSettings } from './genapi-embedding-settings'\nexport type {\n\tGenApiErrorData,\n\tProviderErrorStructure,\n} from './genapi-error'\nexport type { MetadataExtractor } from './genapi-metadata-extractor'\nexport { createGenApi } from './genapi-provider'\nexport type {\n\tGenApiProvider,\n\tGenApiProviderSettings,\n} from './genapi-provider'\n","import {\n\tAPICallError,\n\tInvalidResponseDataError,\n\tLanguageModelV1,\n\tLanguageModelV1CallWarning,\n\tLanguageModelV1FinishReason,\n\tLanguageModelV1ObjectGenerationMode,\n\tLanguageModelV1StreamPart,\n} from '@ai-sdk/provider'\nimport {\n\tcombineHeaders,\n\tcreateEventSourceResponseHandler,\n\tcreateJsonErrorResponseHandler,\n\tcreateJsonResponseHandler,\n\tFetchFunction,\n\tgenerateId,\n\tisParsableJson,\n\tParseResult,\n\tpostJsonToApi,\n\tResponseHandler,\n} from '@ai-sdk/provider-utils'\nimport { z } from 'zod'\nimport { convertToGenApiChatMessages } from './convert-to-genapi-chat-messages'\nimport { getResponseMetadata } from './get-response-metadata'\nimport { mapGenApiFinishReason } from './map-genapi-finish-reason'\nimport { GenApiChatModelId, GenApiChatSettings } from './genapi-chat-settings'\nimport { defaultGenApiErrorStructure, ProviderErrorStructure } from './genapi-error'\nimport { prepareTools } from './genapi-prepare-tools'\nimport { MetadataExtractor } from './genapi-metadata-extractor'\n\nexport type GenApiChatConfig = {\n\tprovider: string;\n\theaders: () => Record<string, string | undefined>;\n\turl: (options: { modelId: string; path: string }) => string;\n\tfetch?: FetchFunction;\n\terrorStructure?: ProviderErrorStructure<any>;\n\tmetadataExtractor?: MetadataExtractor;\n\n\t/**\nDefault object generation mode that should be used with this model when\nno mode is specified. Should be the mode with the best results for this\nmodel. `undefined` can be specified if object generation is not supported.\n\t */\n\tdefaultObjectGenerationMode?: LanguageModelV1ObjectGenerationMode;\n\n\t/**\n\t * Whether the model supports structured outputs.\n\t */\n\tsupportsStructuredOutputs?: boolean;\n};\n\nexport class GenApiChatLanguageModel implements LanguageModelV1 {\n\treadonly specificationVersion = 'v1'\n\n\treadonly supportsStructuredOutputs: boolean\n\n\treadonly modelId: GenApiChatModelId\n\treadonly settings: GenApiChatSettings\n\n\tprivate readonly config: GenApiChatConfig\n\tprivate readonly failedResponseHandler: ResponseHandler<APICallError>\n\tprivate readonly chunkSchema // type inferred via constructor\n\n\tconstructor (\n\t\tmodelId: GenApiChatModelId,\n\t\tsettings: GenApiChatSettings,\n\t\tconfig: GenApiChatConfig,\n\t) {\n\t\tthis.modelId = modelId\n\t\tthis.settings = settings\n\t\tthis.config = config\n\n\t\t// initialize error handling:\n\t\tconst errorStructure =\n\t\t\tconfig.errorStructure ?? defaultGenApiErrorStructure\n\t\tthis.chunkSchema = createGenApiChatChunkSchema(\n\t\t\terrorStructure.errorSchema,\n\t\t)\n\t\tthis.failedResponseHandler = createJsonErrorResponseHandler(errorStructure)\n\n\t\tthis.supportsStructuredOutputs = config.supportsStructuredOutputs ?? false\n\t}\n\n\tget defaultObjectGenerationMode (): 'json' | 'tool' | undefined {\n\t\treturn this.config.defaultObjectGenerationMode\n\t}\n\n\tget provider (): string {\n\t\treturn this.config.provider\n\t}\n\n\tprivate get providerOptionsName (): string {\n\t\treturn this.config.provider.split('.')[0].trim()\n\t}\n\n\tasync doGenerate (\n\t\toptions: Parameters<LanguageModelV1['doGenerate']>[0],\n\t): Promise<Awaited<ReturnType<LanguageModelV1['doGenerate']>>> {\n\t\tconst { args, warnings } = this.getArgs({ ...options })\n\n\t\tconst body = JSON.stringify(args)\n\n\t\t// this.config.provider\n\n\t\tconst {\n\t\t\tresponseHeaders,\n\t\t\tvalue: responseBody,\n\t\t\trawValue: rawResponse,\n\t\t} = await postJsonToApi({\n\t\t\turl: this.config.url({\n\t\t\t\tpath: `/`,\n\t\t\t\tmodelId: this.modelId,\n\t\t\t}),\n\t\t\theaders: combineHeaders(this.config.headers(), options.headers),\n\t\t\tbody: args,\n\t\t\tfailedResponseHandler: this.failedResponseHandler,\n\t\t\tsuccessfulResponseHandler: createJsonResponseHandler(\n\t\t\t\tGenApiChatResponseSchema,\n\t\t\t),\n\t\t\tabortSignal: options.abortSignal,\n\t\t\tfetch: this.config.fetch,\n\t\t})\n\n\t\tconst { messages: rawPrompt, ...rawSettings } = args\n\t\tconst choice = responseBody.choices[0]\n\t\tconst providerMetadata = this.config.metadataExtractor?.extractMetadata?.({\n\t\t\tparsedBody: rawResponse,\n\t\t})\n\n\t\treturn {\n\t\t\ttext: choice.message.content ?? undefined,\n\t\t\treasoning: choice.message.reasoning_content ?? undefined,\n\t\t\ttoolCalls: choice.message.tool_calls?.map(toolCall => ({\n\t\t\t\ttoolCallType: 'function',\n\t\t\t\ttoolCallId: toolCall.id ?? generateId(),\n\t\t\t\ttoolName: toolCall.function.name,\n\t\t\t\targs: toolCall.function.arguments!,\n\t\t\t})),\n\t\t\tfinishReason: mapGenApiFinishReason(choice.finish_reason),\n\t\t\tusage: {\n\t\t\t\tpromptTokens: responseBody.usage?.prompt_tokens ?? NaN,\n\t\t\t\tcompletionTokens: responseBody.usage?.completion_tokens ?? NaN,\n\t\t\t},\n\t\t\t...(providerMetadata && { providerMetadata }),\n\t\t\trawCall: { rawPrompt, rawSettings },\n\t\t\trawResponse: { headers: responseHeaders, body: rawResponse },\n\t\t\tresponse: getResponseMetadata(responseBody),\n\t\t\twarnings,\n\t\t\trequest: { body },\n\t\t}\n\t}\n\n\tasync doStream (\n\t\toptions: Parameters<LanguageModelV1['doStream']>[0],\n\t): Promise<Awaited<ReturnType<LanguageModelV1['doStream']>>> {\n\t\tif (this.settings.simulateStreaming) {\n\t\t\tconst result = await this.doGenerate(options)\n\t\t\tconst simulatedStream = new ReadableStream<LanguageModelV1StreamPart>({\n\t\t\t\tstart (controller) {\n\t\t\t\t\tcontroller.enqueue({ type: 'response-metadata', ...result.response })\n\t\t\t\t\tif (result.reasoning) {\n\t\t\t\t\t\tif (Array.isArray(result.reasoning)) {\n\t\t\t\t\t\t\tfor (const part of result.reasoning) {\n\t\t\t\t\t\t\t\tif (part.type === 'text') {\n\t\t\t\t\t\t\t\t\tcontroller.enqueue({\n\t\t\t\t\t\t\t\t\t\ttype: 'reasoning',\n\t\t\t\t\t\t\t\t\t\ttextDelta: part.text,\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcontroller.enqueue({\n\t\t\t\t\t\t\t\ttype: 'reasoning',\n\t\t\t\t\t\t\t\ttextDelta: result.reasoning,\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (result.text) {\n\t\t\t\t\t\tcontroller.enqueue({\n\t\t\t\t\t\t\ttype: 'text-delta',\n\t\t\t\t\t\t\ttextDelta: result.text,\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t\tif (result.toolCalls) {\n\t\t\t\t\t\tfor (const toolCall of result.toolCalls) {\n\t\t\t\t\t\t\tcontroller.enqueue({\n\t\t\t\t\t\t\t\ttype: 'tool-call',\n\t\t\t\t\t\t\t\t...toolCall,\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcontroller.enqueue({\n\t\t\t\t\t\ttype: 'finish',\n\t\t\t\t\t\tfinishReason: result.finishReason,\n\t\t\t\t\t\tusage: result.usage,\n\t\t\t\t\t\tlogprobs: result.logprobs,\n\t\t\t\t\t\tproviderMetadata: result.providerMetadata,\n\t\t\t\t\t})\n\t\t\t\t\tcontroller.close()\n\t\t\t\t},\n\t\t\t})\n\t\t\treturn {\n\t\t\t\tstream: simulatedStream,\n\t\t\t\trawCall: result.rawCall,\n\t\t\t\trawResponse: result.rawResponse,\n\t\t\t\twarnings: result.warnings,\n\t\t\t}\n\t\t}\n\n\t\tconst { args, warnings } = this.getArgs({ ...options })\n\n\t\tconst body = JSON.stringify({ ...args, stream: true })\n\t\tconst metadataExtractor =\n\t\t\tthis.config.metadataExtractor?.createStreamExtractor()\n\n\t\tconst { responseHeaders, value: response } = await postJsonToApi({\n\t\t\turl: this.config.url({\n\t\t\t\tpath: `/`,\n\t\t\t\tmodelId: this.modelId,\n\t\t\t}),\n\t\t\theaders: combineHeaders(this.config.headers(), options.headers),\n\t\t\tbody: {\n\t\t\t\t...args,\n\t\t\t\tstream: true,\n\t\t\t},\n\t\t\tfailedResponseHandler: this.failedResponseHandler,\n\t\t\tsuccessfulResponseHandler: createEventSourceResponseHandler(\n\t\t\t\tthis.chunkSchema,\n\t\t\t),\n\t\t\tabortSignal: options.abortSignal,\n\t\t\tfetch: this.config.fetch,\n\t\t})\n\n\t\tconst { messages: rawPrompt, ...rawSettings } = args\n\n\t\tconst toolCalls: Array<{\n\t\t\tid: string;\n\t\t\ttype: 'function';\n\t\t\tfunction: {\n\t\t\t\tname: string;\n\t\t\t\targuments: string;\n\t\t\t};\n\t\t\thasFinished: boolean;\n\t\t}> = []\n\n\t\tlet finishReason: LanguageModelV1FinishReason = 'unknown'\n\t\tlet usage: {\n\t\t\tpromptTokens: number | undefined;\n\t\t\tcompletionTokens: number | undefined;\n\t\t} = {\n\t\t\tpromptTokens: undefined,\n\t\t\tcompletionTokens: undefined,\n\t\t}\n\t\tlet isFirstChunk = true\n\n\t\treturn {\n\t\t\tstream: response.pipeThrough(\n\t\t\t\tnew TransformStream<\n\t\t\t\t\tParseResult<z.infer<typeof this.chunkSchema>>,\n\t\t\t\t\tLanguageModelV1StreamPart\n\t\t\t\t>({\n\t\t\t\t\t// TODO we lost type safety on Chunk, most likely due to the error schema. MUST FIX\n\t\t\t\t\ttransform (chunk, controller) {\n\t\t\t\t\t\t// handle failed chunk parsing / validation:\n\t\t\t\t\t\tif (!chunk.success) {\n\t\t\t\t\t\t\tfinishReason = 'error'\n\t\t\t\t\t\t\tcontroller.enqueue({ type: 'error', error: chunk.error })\n\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst value = chunk.value\n\n\t\t\t\t\t\tmetadataExtractor?.processChunk(chunk.rawValue)\n\n\t\t\t\t\t\t// handle error chunks:\n\t\t\t\t\t\tif ('error' in value) {\n\t\t\t\t\t\t\tfinishReason = 'error'\n\t\t\t\t\t\t\tcontroller.enqueue({ type: 'error', error: value.error.message })\n\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (isFirstChunk) {\n\t\t\t\t\t\t\tisFirstChunk = false\n\n\t\t\t\t\t\t\tcontroller.enqueue({\n\t\t\t\t\t\t\t\ttype: 'response-metadata',\n\t\t\t\t\t\t\t\t...getResponseMetadata(value),\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (value.usage != null) {\n\t\t\t\t\t\t\tusage = {\n\t\t\t\t\t\t\t\tpromptTokens: value.usage.prompt_tokens ?? undefined,\n\t\t\t\t\t\t\t\tcompletionTokens: value.usage.completion_tokens ?? undefined,\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst choice = value.choices[0]\n\n\t\t\t\t\t\tif (choice?.finish_reason != null) {\n\t\t\t\t\t\t\tfinishReason = mapGenApiFinishReason(\n\t\t\t\t\t\t\t\tchoice.finish_reason,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (choice?.delta == null) {\n\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst delta = choice.delta\n\n\t\t\t\t\t\t// enqueue reasoning before text deltas:\n\t\t\t\t\t\tif (delta.reasoning_content != null) {\n\t\t\t\t\t\t\tcontroller.enqueue({\n\t\t\t\t\t\t\t\ttype: 'reasoning',\n\t\t\t\t\t\t\t\ttextDelta: delta.reasoning_content,\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (delta.content != null) {\n\t\t\t\t\t\t\tcontroller.enqueue({\n\t\t\t\t\t\t\t\ttype: 'text-delta',\n\t\t\t\t\t\t\t\ttextDelta: delta.content,\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (delta.tool_calls != null) {\n\t\t\t\t\t\t\tfor (const toolCallDelta of delta.tool_calls) {\n\t\t\t\t\t\t\t\tconst index = toolCallDelta.index\n\n\t\t\t\t\t\t\t\tif (toolCalls[index] == null) {\n\t\t\t\t\t\t\t\t\tif (toolCallDelta.type !== 'function') {\n\t\t\t\t\t\t\t\t\t\tthrow new InvalidResponseDataError({\n\t\t\t\t\t\t\t\t\t\t\tdata: toolCallDelta,\n\t\t\t\t\t\t\t\t\t\t\tmessage: `Expected 'function' type.`,\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tif (toolCallDelta.id == null) {\n\t\t\t\t\t\t\t\t\t\tthrow new InvalidResponseDataError({\n\t\t\t\t\t\t\t\t\t\t\tdata: toolCallDelta,\n\t\t\t\t\t\t\t\t\t\t\tmessage: `Expected 'id' to be a string.`,\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tif (toolCallDelta.function?.name == null) {\n\t\t\t\t\t\t\t\t\t\tthrow new InvalidResponseDataError({\n\t\t\t\t\t\t\t\t\t\t\tdata: toolCallDelta,\n\t\t\t\t\t\t\t\t\t\t\tmessage: `Expected 'function.name' to be a string.`,\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\ttoolCalls[index] = {\n\t\t\t\t\t\t\t\t\t\tid: toolCallDelta.id,\n\t\t\t\t\t\t\t\t\t\ttype: 'function',\n\t\t\t\t\t\t\t\t\t\tfunction: {\n\t\t\t\t\t\t\t\t\t\t\tname: toolCallDelta.function.name,\n\t\t\t\t\t\t\t\t\t\t\targuments: toolCallDelta.function.arguments ?? '',\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\thasFinished: false,\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tconst toolCall = toolCalls[index]\n\n\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\ttoolCall.function?.name != null &&\n\t\t\t\t\t\t\t\t\t\ttoolCall.function?.arguments != null\n\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t// send delta if the argument text has already started:\n\t\t\t\t\t\t\t\t\t\tif (toolCall.function.arguments.length > 0) {\n\t\t\t\t\t\t\t\t\t\t\tcontroller.enqueue({\n\t\t\t\t\t\t\t\t\t\t\t\ttype: 'tool-call-delta',\n\t\t\t\t\t\t\t\t\t\t\t\ttoolCallType: 'function',\n\t\t\t\t\t\t\t\t\t\t\t\ttoolCallId: toolCall.id,\n\t\t\t\t\t\t\t\t\t\t\t\ttoolName: toolCall.function.name,\n\t\t\t\t\t\t\t\t\t\t\t\targsTextDelta: toolCall.function.arguments,\n\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t// check if tool call is complete\n\t\t\t\t\t\t\t\t\t\t// (some providers send the full tool call in one chunk):\n\t\t\t\t\t\t\t\t\t\tif (isParsableJson(toolCall.function.arguments)) {\n\t\t\t\t\t\t\t\t\t\t\tcontroller.enqueue({\n\t\t\t\t\t\t\t\t\t\t\t\ttype: 'tool-call',\n\t\t\t\t\t\t\t\t\t\t\t\ttoolCallType: 'function',\n\t\t\t\t\t\t\t\t\t\t\t\ttoolCallId: toolCall.id ?? generateId(),\n\t\t\t\t\t\t\t\t\t\t\t\ttoolName: toolCall.function.name,\n\t\t\t\t\t\t\t\t\t\t\t\targs: toolCall.function.arguments,\n\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\ttoolCall.hasFinished = true\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// existing tool call, merge if not finished\n\t\t\t\t\t\t\t\tconst toolCall = toolCalls[index]\n\n\t\t\t\t\t\t\t\tif (toolCall.hasFinished) {\n\t\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (toolCallDelta.function?.arguments != null) {\n\t\t\t\t\t\t\t\t\ttoolCall.function!.arguments +=\n\t\t\t\t\t\t\t\t\t\ttoolCallDelta.function?.arguments ?? ''\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// send delta\n\t\t\t\t\t\t\t\tcontroller.enqueue({\n\t\t\t\t\t\t\t\t\ttype: 'tool-call-delta',\n\t\t\t\t\t\t\t\t\ttoolCallType: 'function',\n\t\t\t\t\t\t\t\t\ttoolCallId: toolCall.id,\n\t\t\t\t\t\t\t\t\ttoolName: toolCall.function.name,\n\t\t\t\t\t\t\t\t\targsTextDelta: toolCallDelta.function.arguments ?? '',\n\t\t\t\t\t\t\t\t})\n\n\t\t\t\t\t\t\t\t// check if tool call is complete\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\ttoolCall.function?.name != null &&\n\t\t\t\t\t\t\t\t\ttoolCall.function?.arguments != null &&\n\t\t\t\t\t\t\t\t\tisParsableJson(toolCall.function.arguments)\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\tcontroller.enqueue({\n\t\t\t\t\t\t\t\t\t\ttype: 'tool-call',\n\t\t\t\t\t\t\t\t\t\ttoolCallType: 'function',\n\t\t\t\t\t\t\t\t\t\ttoolCallId: toolCall.id ?? generateId(),\n\t\t\t\t\t\t\t\t\t\ttoolName: toolCall.function.name,\n\t\t\t\t\t\t\t\t\t\targs: toolCall.function.arguments,\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\ttoolCall.hasFinished = true\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\n\t\t\t\t\tflush (controller) {\n\t\t\t\t\t\tconst metadata = metadataExtractor?.buildMetadata()\n\t\t\t\t\t\tcontroller.enqueue({\n\t\t\t\t\t\t\ttype: 'finish',\n\t\t\t\t\t\t\tfinishReason,\n\t\t\t\t\t\t\tusage: {\n\t\t\t\t\t\t\t\tpromptTokens: usage.promptTokens ?? NaN,\n\t\t\t\t\t\t\t\tcompletionTokens: usage.completionTokens ?? NaN,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t...(metadata && { providerMetadata: metadata }),\n\t\t\t\t\t\t})\n\t\t\t\t\t},\n\t\t\t\t}),\n\t\t\t),\n\t\t\trawCall: { rawPrompt, rawSettings },\n\t\t\trawResponse: { headers: responseHeaders },\n\t\t\twarnings,\n\t\t\trequest: { body },\n\t\t}\n\t}\n\n\tprivate getArgs ({\n\t\t                 mode,\n\t\t                 prompt,\n\t\t                 maxTokens,\n\t\t                 temperature,\n\t\t                 topP,\n\t\t                 topK,\n\t\t                 frequencyPenalty,\n\t\t                 presencePenalty,\n\t\t                 providerMetadata,\n\t\t                 stopSequences,\n\t\t                 responseFormat,\n\t\t                 seed,\n\t                 }: Parameters<LanguageModelV1['doGenerate']>[0]) {\n\t\tconst type = mode.type\n\n\t\tconst warnings: LanguageModelV1CallWarning[] = []\n\n\t\tif (topK != null) {\n\t\t\twarnings.push({\n\t\t\t\ttype: 'unsupported-setting',\n\t\t\t\tsetting: 'topK',\n\t\t\t})\n\t\t}\n\n\t\tif (\n\t\t\tresponseFormat?.type === 'json' &&\n\t\t\tresponseFormat.schema != null &&\n\t\t\t!this.supportsStructuredOutputs\n\t\t) {\n\t\t\twarnings.push({\n\t\t\t\ttype: 'unsupported-setting',\n\t\t\t\tsetting: 'responseFormat',\n\t\t\t\tdetails:\n\t\t\t\t\t'JSON response format schema is only supported with structuredOutputs',\n\t\t\t})\n\t\t}\n\n\t\tconst baseArgs = {\n\t\t\t// model id:\n\t\t\tmodel: this.modelId,\n\n\t\t\t// model specific settings:\n\t\t\tuser: this.settings.user,\n\n\t\t\t// standardized settings:\n\t\t\tmax_tokens: maxTokens,\n\t\t\ttemperature,\n\t\t\ttop_p: topP,\n\t\t\tfrequency_penalty: frequencyPenalty,\n\t\t\tpresence_penalty: presencePenalty,\n\t\t\tresponse_format:\n\t\t\t\tresponseFormat?.type === 'json'\n\t\t\t\t\t? this.supportsStructuredOutputs === true &&\n\t\t\t\t\tresponseFormat.schema != null\n\t\t\t\t\t\t? {\n\t\t\t\t\t\t\ttype: 'json_schema',\n\t\t\t\t\t\t\tjson_schema: {\n\t\t\t\t\t\t\t\tschema: responseFormat.schema,\n\t\t\t\t\t\t\t\tname: responseFormat.name ?? 'response',\n\t\t\t\t\t\t\t\tdescription: responseFormat.description,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t}\n\t\t\t\t\t\t: { type: 'json_object' }\n\t\t\t\t\t: undefined,\n\n\t\t\tstop: stopSequences,\n\t\t\tseed,\n\t\t\t...providerMetadata?.[this.providerOptionsName],\n\n\t\t\t// messages:\n\t\t\tmessages: convertToGenApiChatMessages(prompt),\n\t\t}\n\n\t\tswitch (type) {\n\t\t\tcase 'regular': {\n\t\t\t\tconst { tools, tool_choice, toolWarnings } = prepareTools({\n\t\t\t\t\tmode,\n\t\t\t\t\tstructuredOutputs: this.supportsStructuredOutputs,\n\t\t\t\t})\n\n\t\t\t\treturn {\n\t\t\t\t\targs: { ...baseArgs, tools, tool_choice },\n\t\t\t\t\twarnings: [...warnings, ...toolWarnings],\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcase 'object-json': {\n\t\t\t\treturn {\n\t\t\t\t\targs: {\n\t\t\t\t\t\t...baseArgs,\n\t\t\t\t\t\tresponse_format:\n\t\t\t\t\t\t\tthis.supportsStructuredOutputs === true && mode.schema != null\n\t\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\ttype: 'json_schema',\n\t\t\t\t\t\t\t\t\tjson_schema: {\n\t\t\t\t\t\t\t\t\t\tschema: mode.schema,\n\t\t\t\t\t\t\t\t\t\tname: mode.name ?? 'response',\n\t\t\t\t\t\t\t\t\t\tdescription: mode.description,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t: { type: 'json_object' },\n\t\t\t\t\t},\n\t\t\t\t\twarnings,\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcase 'object-tool': {\n\t\t\t\treturn {\n\t\t\t\t\targs: {\n\t\t\t\t\t\t...baseArgs,\n\t\t\t\t\t\ttool_choice: {\n\t\t\t\t\t\t\ttype: 'function',\n\t\t\t\t\t\t\tfunction: { name: mode.tool.name },\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttools: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'function',\n\t\t\t\t\t\t\t\tfunction: {\n\t\t\t\t\t\t\t\t\tname: mode.tool.name,\n\t\t\t\t\t\t\t\t\tdescription: mode.tool.description,\n\t\t\t\t\t\t\t\t\tparameters: mode.tool.parameters,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t\twarnings,\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\tconst _exhaustiveCheck: never = type\n\t\t\t\tthrow new Error(`Unsupported type: ${_exhaustiveCheck}`)\n\t\t\t}\n\t\t}\n\t}\n}\n\n// limited version of the schema, focussed on what is needed for the implementation\n// this approach limits breakages when the API changes and increases efficiency\nconst GenApiChatResponseSchema = z.object({\n\tid: z.string().nullish(),\n\tcreated: z.number().nullish(),\n\tmodel: z.string().nullish(),\n\tchoices: z.array(\n\t\tz.object({\n\t\t\tmessage: z.object({\n\t\t\t\trole: z.literal('assistant').nullish(),\n\t\t\t\tcontent: z.string().nullish(),\n\t\t\t\treasoning_content: z.string().nullish(),\n\t\t\t\ttool_calls: z\n\t\t\t\t\t.array(\n\t\t\t\t\t\tz.object({\n\t\t\t\t\t\t\tid: z.string().nullish(),\n\t\t\t\t\t\t\ttype: z.literal('function'),\n\t\t\t\t\t\t\tfunction: z.object({\n\t\t\t\t\t\t\t\tname: z.string(),\n\t\t\t\t\t\t\t\targuments: z.string(),\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t}),\n\t\t\t\t\t)\n\t\t\t\t\t.nullish(),\n\t\t\t}),\n\t\t\tfinish_reason: z.string().nullish(),\n\t\t}),\n\t),\n\tusage: z\n\t\t.object({\n\t\t\tprompt_tokens: z.number().nullish(),\n\t\t\tcompletion_tokens: z.number().nullish(),\n\t\t})\n\t\t.nullish(),\n})\n\n// limited version of the schema, focussed on what is needed for the implementation\n// this approach limits breakages when the API changes and increases efficiency\nconst createGenApiChatChunkSchema = <ERROR_SCHEMA extends z.ZodType> (\n\terrorSchema: ERROR_SCHEMA,\n) =>\n\tz.union([\n\t\tz.object({\n\t\t\tid: z.string().nullish(),\n\t\t\tcreated: z.number().nullish(),\n\t\t\tmodel: z.string().nullish(),\n\t\t\tchoices: z.array(\n\t\t\t\tz.object({\n\t\t\t\t\tdelta: z\n\t\t\t\t\t\t.object({\n\t\t\t\t\t\t\trole: z.enum(['assistant']).nullish(),\n\t\t\t\t\t\t\tcontent: z.string().nullish(),\n\t\t\t\t\t\t\treasoning_content: z.string().nullish(),\n\t\t\t\t\t\t\ttool_calls: z\n\t\t\t\t\t\t\t\t.array(\n\t\t\t\t\t\t\t\t\tz.object({\n\t\t\t\t\t\t\t\t\t\tindex: z.number(),\n\t\t\t\t\t\t\t\t\t\tid: z.string().nullish(),\n\t\t\t\t\t\t\t\t\t\ttype: z.literal('function').optional(),\n\t\t\t\t\t\t\t\t\t\tfunction: z.object({\n\t\t\t\t\t\t\t\t\t\t\tname: z.string().nullish(),\n\t\t\t\t\t\t\t\t\t\t\targuments: z.string().nullish(),\n\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t.nullish(),\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.nullish(),\n\t\t\t\t\tfinish_reason: z.string().nullish(),\n\t\t\t\t}),\n\t\t\t),\n\t\t\tusage: z\n\t\t\t\t.object({\n\t\t\t\t\tprompt_tokens: z.number().nullish(),\n\t\t\t\t\tcompletion_tokens: z.number().nullish(),\n\t\t\t\t})\n\t\t\t\t.nullish(),\n\t\t}),\n\t\terrorSchema,\n\t])\n","import {\n\tLanguageModelV1Prompt,\n\tLanguageModelV1ProviderMetadata,\n\tUnsupportedFunctionalityError,\n} from '@ai-sdk/provider'\nimport { convertUint8ArrayToBase64 } from '@ai-sdk/provider-utils'\nimport { GenApiChatPrompt } from './genapi-api-types'\n\nfunction getGenAPIMetadata (message: {\n\tproviderMetadata?: LanguageModelV1ProviderMetadata;\n}) {\n\treturn message?.providerMetadata?.genApi ?? {}\n}\n\nexport function convertToGenApiChatMessages (\n\tprompt: LanguageModelV1Prompt,\n): GenApiChatPrompt {\n\tconst messages: GenApiChatPrompt = []\n\tfor (const { role, content, ...message } of prompt) {\n\t\tconst metadata = getGenAPIMetadata({ ...message })\n\t\tswitch (role) {\n\t\t\tcase 'system': {\n\t\t\t\tmessages.push({ role: 'system', content, ...metadata })\n\t\t\t\tbreak\n\t\t\t}\n\n\t\t\tcase 'user': {\n\t\t\t\tif (content.length === 1 && content[0].type === 'text') {\n\t\t\t\t\tmessages.push({\n\t\t\t\t\t\trole: 'user',\n\t\t\t\t\t\tcontent: content[0].text,\n\t\t\t\t\t\t...getGenAPIMetadata(content[0]),\n\t\t\t\t\t})\n\t\t\t\t\tbreak\n\t\t\t\t}\n\n\t\t\t\tmessages.push({\n\t\t\t\t\trole: 'user',\n\t\t\t\t\tcontent: content.map(part => {\n\t\t\t\t\t\tconst partMetadata = getGenAPIMetadata(part)\n\t\t\t\t\t\tswitch (part.type) {\n\t\t\t\t\t\t\tcase 'text': {\n\t\t\t\t\t\t\t\treturn { type: 'text', text: part.text, ...partMetadata }\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcase 'image': {\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\ttype: 'image_url',\n\t\t\t\t\t\t\t\t\timage_url: {\n\t\t\t\t\t\t\t\t\t\turl:\n\t\t\t\t\t\t\t\t\t\t\tpart.image instanceof URL\n\t\t\t\t\t\t\t\t\t\t\t\t? part.image.toString()\n\t\t\t\t\t\t\t\t\t\t\t\t: `data:${\n\t\t\t\t\t\t\t\t\t\t\t\t\tpart.mimeType ?? 'image/jpeg'\n\t\t\t\t\t\t\t\t\t\t\t\t};base64,${convertUint8ArrayToBase64(part.image)}`,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t...partMetadata,\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcase 'file': {\n\t\t\t\t\t\t\t\tthrow new UnsupportedFunctionalityError({\n\t\t\t\t\t\t\t\t\tfunctionality: 'File content parts in user messages',\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}),\n\t\t\t\t\t...metadata,\n\t\t\t\t})\n\n\t\t\t\tbreak\n\t\t\t}\n\n\t\t\tcase 'assistant': {\n\t\t\t\tlet text = ''\n\t\t\t\tconst toolCalls: Array<{\n\t\t\t\t\tid: string;\n\t\t\t\t\ttype: 'function';\n\t\t\t\t\tfunction: { name: string; arguments: string };\n\t\t\t\t}> = []\n\n\t\t\t\tfor (const part of content) {\n\t\t\t\t\tconst partMetadata = getGenAPIMetadata(part)\n\t\t\t\t\tswitch (part.type) {\n\t\t\t\t\t\tcase 'text': {\n\t\t\t\t\t\t\ttext += part.text\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase 'tool-call': {\n\t\t\t\t\t\t\ttoolCalls.push({\n\t\t\t\t\t\t\t\tid: part.toolCallId,\n\t\t\t\t\t\t\t\ttype: 'function',\n\t\t\t\t\t\t\t\tfunction: {\n\t\t\t\t\t\t\t\t\tname: part.toolName,\n\t\t\t\t\t\t\t\t\targuments: JSON.stringify(part.args),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t...partMetadata,\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tmessages.push({\n\t\t\t\t\trole: 'assistant',\n\t\t\t\t\tcontent: text,\n\t\t\t\t\ttool_calls: toolCalls.length > 0 ? toolCalls : undefined,\n\t\t\t\t\t...metadata,\n\t\t\t\t})\n\n\t\t\t\tbreak\n\t\t\t}\n\n\t\t\tcase 'tool': {\n\t\t\t\tfor (const toolResponse of content) {\n\t\t\t\t\tconst toolResponseMetadata = getGenAPIMetadata(toolResponse)\n\t\t\t\t\tmessages.push({\n\t\t\t\t\t\trole: 'tool',\n\t\t\t\t\t\ttool_call_id: toolResponse.toolCallId,\n\t\t\t\t\t\tcontent: JSON.stringify(toolResponse.result),\n\t\t\t\t\t\t...toolResponseMetadata,\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\tconst _exhaustiveCheck: never = role\n\t\t\t\tthrow new Error(`Unsupported role: ${_exhaustiveCheck}`)\n\t\t\t}\n\t\t}\n\t}\n\n\treturn messages\n}\n","export function getResponseMetadata ({\n\t                                     id,\n\t                                     model,\n\t                                     created,\n                                     }: {\n\tid?: string | undefined | null;\n\tcreated?: number | undefined | null;\n\tmodel?: string | undefined | null;\n}) {\n\treturn {\n\t\tid: id ?? undefined,\n\t\tmodelId: model ?? undefined,\n\t\ttimestamp: created != null ? new Date(created * 1000) : undefined,\n\t}\n}\n","import { LanguageModelV1FinishReason } from '@ai-sdk/provider'\n\nexport function mapGenApiFinishReason (\n\tfinishReason: string | null | undefined,\n): LanguageModelV1FinishReason {\n\tswitch (finishReason) {\n\t\tcase 'stop':\n\t\t\treturn 'stop'\n\t\tcase 'length':\n\t\t\treturn 'length'\n\t\tcase 'content_filter':\n\t\t\treturn 'content-filter'\n\t\tcase 'function_call':\n\t\tcase 'tool_calls':\n\t\t\treturn 'tool-calls'\n\t\tdefault:\n\t\t\treturn 'unknown'\n\t}\n}\n","import { z, ZodSchema } from 'zod'\n\nexport const genApiErrorDataSchema = z.object({\n\terror: z.object({\n\t\tmessage: z.string(),\n\n\t\t// The additional information below is handled loosely to support\n\t\t// genapi providers that have slightly different error\n\t\t// responses:\n\t\ttype: z.string().nullish(),\n\t\tparam: z.any().nullish(),\n\t\tcode: z.union([z.string(), z.number()]).nullish(),\n\t}),\n})\n\nexport type GenApiErrorData = z.infer<\n\ttypeof genApiErrorDataSchema\n>;\n\nexport type ProviderErrorStructure<T> = {\n\terrorSchema: ZodSchema<T>;\n\terrorToMessage: (error: T) => string;\n\tisRetryable?: (response: Response, error?: T) => boolean;\n};\n\nexport const defaultGenApiErrorStructure: ProviderErrorStructure<GenApiErrorData> =\n\t{\n\t\terrorSchema: genApiErrorDataSchema,\n\t\terrorToMessage: data => data.error.message,\n\t}\n","import { LanguageModelV1, LanguageModelV1CallWarning, UnsupportedFunctionalityError } from '@ai-sdk/provider'\n\nexport function prepareTools ({\n\t                              mode,\n\t                              structuredOutputs,\n                              }: {\n\tmode: Parameters<LanguageModelV1['doGenerate']>[0]['mode'] & {\n\t\ttype: 'regular';\n\t};\n\tstructuredOutputs: boolean;\n}): {\n\ttools:\n\t\t| undefined\n\t\t| Array<{\n\t\ttype: 'function';\n\t\tfunction: {\n\t\t\tname: string;\n\t\t\tdescription: string | undefined;\n\t\t\tparameters: unknown;\n\t\t};\n\t}>;\n\ttool_choice:\n\t\t| { type: 'function'; function: { name: string } }\n\t\t| 'auto'\n\t\t| 'none'\n\t\t| 'required'\n\t\t| undefined;\n\ttoolWarnings: LanguageModelV1CallWarning[];\n} {\n\t// when the tools array is empty, change it to undefined to prevent errors:\n\tconst tools = mode.tools?.length ? mode.tools : undefined\n\tconst toolWarnings: LanguageModelV1CallWarning[] = []\n\n\tif (tools == null) {\n\t\treturn { tools: undefined, tool_choice: undefined, toolWarnings }\n\t}\n\n\tconst toolChoice = mode.toolChoice\n\n\tconst genapiCompatTools: Array<{\n\t\ttype: 'function';\n\t\tfunction: {\n\t\t\tname: string;\n\t\t\tdescription: string | undefined;\n\t\t\tparameters: unknown;\n\t\t};\n\t}> = []\n\n\tfor (const tool of tools) {\n\t\tif (tool.type === 'provider-defined') {\n\t\t\ttoolWarnings.push({ type: 'unsupported-tool', tool })\n\t\t} else {\n\t\t\tgenapiCompatTools.push({\n\t\t\t\ttype: 'function',\n\t\t\t\tfunction: {\n\t\t\t\t\tname: tool.name,\n\t\t\t\t\tdescription: tool.description,\n\t\t\t\t\tparameters: tool.parameters,\n\t\t\t\t},\n\t\t\t})\n\t\t}\n\t}\n\n\tif (toolChoice == null) {\n\t\treturn { tools: genapiCompatTools, tool_choice: undefined, toolWarnings }\n\t}\n\n\tconst type = toolChoice.type\n\n\tswitch (type) {\n\t\tcase 'auto':\n\t\tcase 'none':\n\t\tcase 'required':\n\t\t\treturn { tools: genapiCompatTools, tool_choice: type, toolWarnings }\n\t\tcase 'tool':\n\t\t\treturn {\n\t\t\t\ttools: genapiCompatTools,\n\t\t\t\ttool_choice: {\n\t\t\t\t\ttype: 'function',\n\t\t\t\t\tfunction: {\n\t\t\t\t\t\tname: toolChoice.toolName,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\ttoolWarnings,\n\t\t\t}\n\t\tdefault: {\n\t\t\tconst _exhaustiveCheck: never = type\n\t\t\tthrow new UnsupportedFunctionalityError({\n\t\t\t\tfunctionality: `Unsupported tool choice type: ${_exhaustiveCheck}`,\n\t\t\t})\n\t\t}\n\t}\n}\n","import {\n\tAPICallError,\n\tLanguageModelV1,\n\tLanguageModelV1CallWarning,\n\tLanguageModelV1FinishReason,\n\tLanguageModelV1StreamPart,\n\tUnsupportedFunctionalityError,\n} from '@ai-sdk/provider'\nimport {\n\tcombineHeaders,\n\tcreateEventSourceResponseHandler,\n\tcreateJsonErrorResponseHandler,\n\tcreateJsonResponseHandler,\n\tFetchFunction,\n\tParseResult,\n\tpostJsonToApi,\n\tResponseHandler,\n} from '@ai-sdk/provider-utils'\nimport { z } from 'zod'\nimport { convertToGenApiCompletionPrompt } from './convert-to-genapi-completion-prompt'\nimport { getResponseMetadata } from './get-response-metadata'\nimport { mapGenApiFinishReason } from './map-genapi-finish-reason'\nimport {\n\tGenApiCompletionModelId,\n\tGenApiCompletionSettings,\n} from './genapi-completion-settings'\nimport { defaultGenApiErrorStructure, ProviderErrorStructure } from './genapi-error'\n\ntype GenApiCompletionConfig = {\n\tprovider: string;\n\theaders: () => Record<string, string | undefined>;\n\turl: (options: { modelId: string; path: string }) => string;\n\tfetch?: FetchFunction;\n\terrorStructure?: ProviderErrorStructure<any>;\n};\n\nexport class GenApiCompletionLanguageModel\n\timplements LanguageModelV1 {\n\treadonly specificationVersion = 'v1'\n\treadonly defaultObjectGenerationMode = undefined\n\n\treadonly modelId: GenApiCompletionModelId\n\treadonly settings: GenApiCompletionSettings\n\n\tprivate readonly config: GenApiCompletionConfig\n\tprivate readonly failedResponseHandler: ResponseHandler<APICallError>\n\tprivate readonly chunkSchema // type inferred via constructor\n\n\tconstructor (\n\t\tmodelId: GenApiCompletionModelId,\n\t\tsettings: GenApiCompletionSettings,\n\t\tconfig: GenApiCompletionConfig,\n\t) {\n\t\tthis.modelId = modelId\n\t\tthis.settings = settings\n\t\tthis.config = config\n\n\t\t// initialize error handling:\n\t\tconst errorStructure =\n\t\t\tconfig.errorStructure ?? defaultGenApiErrorStructure\n\t\tthis.chunkSchema = createGenApiCompletionChunkSchema(\n\t\t\terrorStructure.errorSchema,\n\t\t)\n\t\tthis.failedResponseHandler = createJsonErrorResponseHandler(errorStructure)\n\t}\n\n\tget provider (): string {\n\t\treturn this.config.provider\n\t}\n\n\tprivate get providerOptionsName (): string {\n\t\treturn this.config.provider.split('.')[0].trim()\n\t}\n\n\tasync doGenerate (\n\t\toptions: Parameters<LanguageModelV1['doGenerate']>[0],\n\t): Promise<Awaited<ReturnType<LanguageModelV1['doGenerate']>>> {\n\t\tconst { args, warnings } = this.getArgs(options)\n\n\t\tconst {\n\t\t\tresponseHeaders,\n\t\t\tvalue: response,\n\t\t\trawValue: rawResponse,\n\t\t} = await postJsonToApi({\n\t\t\turl: this.config.url({\n\t\t\t\tpath: '/completions',\n\t\t\t\tmodelId: this.modelId,\n\t\t\t}),\n\t\t\theaders: combineHeaders(this.config.headers(), options.headers),\n\t\t\tbody: args,\n\t\t\tfailedResponseHandler: this.failedResponseHandler,\n\t\t\tsuccessfulResponseHandler: createJsonResponseHandler(\n\t\t\t\tgenApiCompletionResponseSchema,\n\t\t\t),\n\t\t\tabortSignal: options.abortSignal,\n\t\t\tfetch: this.config.fetch,\n\t\t})\n\n\t\tconst { prompt: rawPrompt, ...rawSettings } = args\n\t\tconst choice = response.choices[0]\n\n\t\treturn {\n\t\t\ttext: choice.text,\n\t\t\tusage: {\n\t\t\t\tpromptTokens: response.usage?.prompt_tokens ?? NaN,\n\t\t\t\tcompletionTokens: response.usage?.completion_tokens ?? NaN,\n\t\t\t},\n\t\t\tfinishReason: mapGenApiFinishReason(choice.finish_reason),\n\t\t\trawCall: { rawPrompt, rawSettings },\n\t\t\trawResponse: { headers: responseHeaders, body: rawResponse },\n\t\t\tresponse: getResponseMetadata(response),\n\t\t\twarnings,\n\t\t\trequest: { body: JSON.stringify(args) },\n\t\t}\n\t}\n\n\tasync doStream (\n\t\toptions: Parameters<LanguageModelV1['doStream']>[0],\n\t): Promise<Awaited<ReturnType<LanguageModelV1['doStream']>>> {\n\t\tconst { args, warnings } = this.getArgs(options)\n\n\t\tconst body = {\n\t\t\t...args,\n\t\t\tstream: true,\n\t\t}\n\n\t\tconst { responseHeaders, value: response } = await postJsonToApi({\n\t\t\turl: this.config.url({\n\t\t\t\tpath: '/completions',\n\t\t\t\tmodelId: this.modelId,\n\t\t\t}),\n\t\t\theaders: combineHeaders(this.config.headers(), options.headers),\n\t\t\tbody,\n\t\t\tfailedResponseHandler: this.failedResponseHandler,\n\t\t\tsuccessfulResponseHandler: createEventSourceResponseHandler(\n\t\t\t\tthis.chunkSchema,\n\t\t\t),\n\t\t\tabortSignal: options.abortSignal,\n\t\t\tfetch: this.config.fetch,\n\t\t})\n\n\t\tconst { prompt: rawPrompt, ...rawSettings } = args\n\n\t\tlet finishReason: LanguageModelV1FinishReason = 'unknown'\n\t\tlet usage: { promptTokens: number; completionTokens: number } = {\n\t\t\tpromptTokens: Number.NaN,\n\t\t\tcompletionTokens: Number.NaN,\n\t\t}\n\t\tlet isFirstChunk = true\n\n\t\treturn {\n\t\t\tstream: response.pipeThrough(\n\t\t\t\tnew TransformStream<\n\t\t\t\t\tParseResult<z.infer<typeof this.chunkSchema>>,\n\t\t\t\t\tLanguageModelV1StreamPart\n\t\t\t\t>({\n\t\t\t\t\ttransform (chunk, controller) {\n\t\t\t\t\t\t// handle failed chunk parsing / validation:\n\t\t\t\t\t\tif (!chunk.success) {\n\t\t\t\t\t\t\tfinishReason = 'error'\n\t\t\t\t\t\t\tcontroller.enqueue({ type: 'error', error: chunk.error })\n\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst value = chunk.value\n\n\t\t\t\t\t\t// handle error chunks:\n\t\t\t\t\t\tif ('error' in value) {\n\t\t\t\t\t\t\tfinishReason = 'error'\n\t\t\t\t\t\t\tcontroller.enqueue({ type: 'error', error: value.error })\n\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (isFirstChunk) {\n\t\t\t\t\t\t\tisFirstChunk = false\n\n\t\t\t\t\t\t\tcontroller.enqueue({\n\t\t\t\t\t\t\t\ttype: 'response-metadata',\n\t\t\t\t\t\t\t\t...getResponseMetadata(value),\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (value.usage != null) {\n\t\t\t\t\t\t\tusage = {\n\t\t\t\t\t\t\t\tpromptTokens: value.usage.prompt_tokens,\n\t\t\t\t\t\t\t\tcompletionTokens: value.usage.completion_tokens,\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst choice = value.choices[0]\n\n\t\t\t\t\t\tif (choice?.finish_reason != null) {\n\t\t\t\t\t\t\tfinishReason = mapGenApiFinishReason(\n\t\t\t\t\t\t\t\tchoice.finish_reason,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (choice?.text != null) {\n\t\t\t\t\t\t\tcontroller.enqueue({\n\t\t\t\t\t\t\t\ttype: 'text-delta',\n\t\t\t\t\t\t\t\ttextDelta: choice.text,\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\n\t\t\t\t\tflush (controller) {\n\t\t\t\t\t\tcontroller.enqueue({\n\t\t\t\t\t\t\ttype: 'finish',\n\t\t\t\t\t\t\tfinishReason,\n\t\t\t\t\t\t\tusage,\n\t\t\t\t\t\t})\n\t\t\t\t\t},\n\t\t\t\t}),\n\t\t\t),\n\t\t\trawCall: { rawPrompt, rawSettings },\n\t\t\trawResponse: { headers: responseHeaders },\n\t\t\twarnings,\n\t\t\trequest: { body: JSON.stringify(body) },\n\t\t}\n\t}\n\n\tprivate getArgs ({\n\t\t                 mode,\n\t\t                 inputFormat,\n\t\t                 prompt,\n\t\t                 maxTokens,\n\t\t                 temperature,\n\t\t                 topP,\n\t\t                 topK,\n\t\t                 frequencyPenalty,\n\t\t                 presencePenalty,\n\t\t                 stopSequences: userStopSequences,\n\t\t                 responseFormat,\n\t\t                 seed,\n\t\t                 providerMetadata,\n\t                 }: Parameters<LanguageModelV1['doGenerate']>[0]) {\n\t\tconst type = mode.type\n\n\t\tconst warnings: LanguageModelV1CallWarning[] = []\n\n\t\tif (topK != null) {\n\t\t\twarnings.push({\n\t\t\t\ttype: 'unsupported-setting',\n\t\t\t\tsetting: 'topK',\n\t\t\t})\n\t\t}\n\n\t\tif (responseFormat != null && responseFormat.type !== 'text') {\n\t\t\twarnings.push({\n\t\t\t\ttype: 'unsupported-setting',\n\t\t\t\tsetting: 'responseFormat',\n\t\t\t\tdetails: 'JSON response format is not supported.',\n\t\t\t})\n\t\t}\n\n\t\tconst { prompt: completionPrompt, stopSequences } =\n\t\t\tconvertToGenApiCompletionPrompt({ prompt, inputFormat })\n\n\t\tconst stop = [...(stopSequences ?? []), ...(userStopSequences ?? [])]\n\n\t\tconst baseArgs = {\n\t\t\t// model id:\n\t\t\tmodel: this.modelId,\n\n\t\t\t// model specific settings:\n\t\t\techo: this.settings.echo,\n\t\t\tlogit_bias: this.settings.logitBias,\n\t\t\tsuffix: this.settings.suffix,\n\t\t\tuser: this.settings.user,\n\n\t\t\t// standardized settings:\n\t\t\tmax_tokens: maxTokens,\n\t\t\ttemperature,\n\t\t\ttop_p: topP,\n\t\t\tfrequency_penalty: frequencyPenalty,\n\t\t\tpresence_penalty: presencePenalty,\n\t\t\tseed,\n\t\t\t...providerMetadata?.[this.providerOptionsName],\n\n\t\t\t// prompt:\n\t\t\tprompt: completionPrompt,\n\n\t\t\t// stop sequences:\n\t\t\tstop: stop.length > 0 ? stop : undefined,\n\t\t}\n\n\t\tswitch (type) {\n\t\t\tcase 'regular': {\n\t\t\t\tif (mode.tools?.length) {\n\t\t\t\t\tthrow new UnsupportedFunctionalityError({\n\t\t\t\t\t\tfunctionality: 'tools',\n\t\t\t\t\t})\n\t\t\t\t}\n\n\t\t\t\tif (mode.toolChoice) {\n\t\t\t\t\tthrow new UnsupportedFunctionalityError({\n\t\t\t\t\t\tfunctionality: 'toolChoice',\n\t\t\t\t\t})\n\t\t\t\t}\n\n\t\t\t\treturn { args: baseArgs, warnings }\n\t\t\t}\n\n\t\t\tcase 'object-json': {\n\t\t\t\tthrow new UnsupportedFunctionalityError({\n\t\t\t\t\tfunctionality: 'object-json mode',\n\t\t\t\t})\n\t\t\t}\n\n\t\t\tcase 'object-tool': {\n\t\t\t\tthrow new UnsupportedFunctionalityError({\n\t\t\t\t\tfunctionality: 'object-tool mode',\n\t\t\t\t})\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\tconst _exhaustiveCheck: never = type\n\t\t\t\tthrow new Error(`Unsupported type: ${_exhaustiveCheck}`)\n\t\t\t}\n\t\t}\n\t}\n}\n\n// limited version of the schema, focussed on what is needed for the implementation\n// this approach limits breakages when the API changes and increases efficiency\nconst genApiCompletionResponseSchema = z.object({\n\tid: z.string().nullish(),\n\tcreated: z.number().nullish(),\n\tmodel: z.string().nullish(),\n\tchoices: z.array(\n\t\tz.object({\n\t\t\ttext: z.string(),\n\t\t\tfinish_reason: z.string(),\n\t\t}),\n\t),\n\tusage: z\n\t\t.object({\n\t\t\tprompt_tokens: z.number(),\n\t\t\tcompletion_tokens: z.number(),\n\t\t})\n\t\t.nullish(),\n})\n\n// limited version of the schema, focussed on what is needed for the implementation\n// this approach limits breakages when the API changes and increases efficiency\nconst createGenApiCompletionChunkSchema = <\n\tERROR_SCHEMA extends z.ZodType,\n> (\n\terrorSchema: ERROR_SCHEMA,\n) =>\n\tz.union([\n\t\tz.object({\n\t\t\tid: z.string().nullish(),\n\t\t\tcreated: z.number().nullish(),\n\t\t\tmodel: z.string().nullish(),\n\t\t\tchoices: z.array(\n\t\t\t\tz.object({\n\t\t\t\t\ttext: z.string(),\n\t\t\t\t\tfinish_reason: z.string().nullish(),\n\t\t\t\t\tindex: z.number(),\n\t\t\t\t}),\n\t\t\t),\n\t\t\tusage: z\n\t\t\t\t.object({\n\t\t\t\t\tprompt_tokens: z.number(),\n\t\t\t\t\tcompletion_tokens: z.number(),\n\t\t\t\t})\n\t\t\t\t.nullish(),\n\t\t}),\n\t\terrorSchema,\n\t])\n","import { InvalidPromptError, LanguageModelV1Prompt, UnsupportedFunctionalityError } from '@ai-sdk/provider'\n\nexport function convertToGenApiCompletionPrompt ({\n\t                                                           prompt,\n\t                                                           inputFormat,\n\t                                                           user = 'user',\n\t                                                           assistant = 'assistant',\n                                                           }: {\n\tprompt: LanguageModelV1Prompt;\n\tinputFormat: 'prompt' | 'messages';\n\tuser?: string;\n\tassistant?: string;\n}): {\n\tprompt: string;\n\tstopSequences?: string[];\n} {\n\t// When the user supplied a prompt input, we don't transform it:\n\tif (\n\t\tinputFormat === 'prompt' &&\n\t\tprompt.length === 1 &&\n\t\tprompt[0].role === 'user' &&\n\t\tprompt[0].content.length === 1 &&\n\t\tprompt[0].content[0].type === 'text'\n\t) {\n\t\treturn { prompt: prompt[0].content[0].text }\n\t}\n\n\t// otherwise transform to a chat message format:\n\tlet text = ''\n\n\t// if first message is a system message, add it to the text:\n\tif (prompt[0].role === 'system') {\n\t\ttext += `${prompt[0].content}\\n\\n`\n\t\tprompt = prompt.slice(1)\n\t}\n\n\tfor (const { role, content } of prompt) {\n\t\tswitch (role) {\n\t\t\tcase 'system': {\n\t\t\t\tthrow new InvalidPromptError({\n\t\t\t\t\tmessage: 'Unexpected system message in prompt: ${content}',\n\t\t\t\t\tprompt,\n\t\t\t\t})\n\t\t\t}\n\n\t\t\tcase 'user': {\n\t\t\t\tconst userMessage = content\n\t\t\t\t\t.map(part => {\n\t\t\t\t\t\tswitch (part.type) {\n\t\t\t\t\t\t\tcase 'text': {\n\t\t\t\t\t\t\t\treturn part.text\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcase 'image': {\n\t\t\t\t\t\t\t\tthrow new UnsupportedFunctionalityError({\n\t\t\t\t\t\t\t\t\tfunctionality: 'images',\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.join('')\n\n\t\t\t\ttext += `${user}:\\n${userMessage}\\n\\n`\n\t\t\t\tbreak\n\t\t\t}\n\n\t\t\tcase 'assistant': {\n\t\t\t\tconst assistantMessage = content\n\t\t\t\t\t.map(part => {\n\t\t\t\t\t\tswitch (part.type) {\n\t\t\t\t\t\t\tcase 'text': {\n\t\t\t\t\t\t\t\treturn part.text\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcase 'tool-call': {\n\t\t\t\t\t\t\t\tthrow new UnsupportedFunctionalityError({\n\t\t\t\t\t\t\t\t\tfunctionality: 'tool-call messages',\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.join('')\n\n\t\t\t\ttext += `${assistant}:\\n${assistantMessage}\\n\\n`\n\t\t\t\tbreak\n\t\t\t}\n\n\t\t\tcase 'tool': {\n\t\t\t\tthrow new UnsupportedFunctionalityError({\n\t\t\t\t\tfunctionality: 'tool messages',\n\t\t\t\t})\n\t\t\t}\n\n\t\t\tdefault: {\n\t\t\t\tconst _exhaustiveCheck: never = role\n\t\t\t\tthrow new Error(`Unsupported role: ${_exhaustiveCheck}`)\n\t\t\t}\n\t\t}\n\t}\n\n\t// Assistant message prefix:\n\ttext += `${assistant}:\\n`\n\n\treturn {\n\t\tprompt: text,\n\t\tstopSequences: [`\\n${user}:`],\n\t}\n}\n","import { EmbeddingModelV1, TooManyEmbeddingValuesForCallError } from '@ai-sdk/provider'\nimport {\n\tcombineHeaders,\n\tcreateJsonErrorResponseHandler,\n\tcreateJsonResponseHandler,\n\tFetchFunction,\n\tpostJsonToApi,\n} from '@ai-sdk/provider-utils'\nimport { z } from 'zod'\nimport {\n\tGenApiEmbeddingModelId,\n\tGenApiEmbeddingSettings,\n} from './genapi-embedding-settings'\nimport { defaultGenApiErrorStructure, ProviderErrorStructure } from './genapi-error'\n\ntype GenApiEmbeddingConfig = {\n\t/**\nOverride the maximum number of embeddings per call.\n\t */\n\tmaxEmbeddingsPerCall?: number;\n\n\t/**\nOverride the parallelism of embedding calls.\n\t */\n\tsupportsParallelCalls?: boolean;\n\n\tprovider: string;\n\turl: (options: { modelId: string; path: string }) => string;\n\theaders: () => Record<string, string | undefined>;\n\tfetch?: FetchFunction;\n\terrorStructure?: ProviderErrorStructure<any>;\n};\n\nexport class GenApiEmbeddingModel\n\timplements EmbeddingModelV1<string> {\n\treadonly specificationVersion = 'v1'\n\treadonly modelId: GenApiEmbeddingModelId\n\n\tprivate readonly config: GenApiEmbeddingConfig\n\tprivate readonly settings: GenApiEmbeddingSettings\n\n\tconstructor (\n\t\tmodelId: GenApiEmbeddingModelId,\n\t\tsettings: GenApiEmbeddingSettings,\n\t\tconfig: GenApiEmbeddingConfig,\n\t) {\n\t\tthis.modelId = modelId\n\t\tthis.settings = settings\n\t\tthis.config = config\n\t}\n\n\tget provider (): string {\n\t\treturn this.config.provider\n\t}\n\n\tget maxEmbeddingsPerCall (): number {\n\t\treturn this.config.maxEmbeddingsPerCall ?? 2048\n\t}\n\n\tget supportsParallelCalls (): boolean {\n\t\treturn this.config.supportsParallelCalls ?? true\n\t}\n\n\tasync doEmbed ({\n\t\t               values,\n\t\t               headers,\n\t\t               abortSignal,\n\t               }: Parameters<EmbeddingModelV1<string>['doEmbed']>[0]): Promise<\n\t\tAwaited<ReturnType<EmbeddingModelV1<string>['doEmbed']>>\n\t> {\n\t\tif (values.length > this.maxEmbeddingsPerCall) {\n\t\t\tthrow new TooManyEmbeddingValuesForCallError({\n\t\t\t\tprovider: this.provider,\n\t\t\t\tmodelId: this.modelId,\n\t\t\t\tmaxEmbeddingsPerCall: this.maxEmbeddingsPerCall,\n\t\t\t\tvalues,\n\t\t\t})\n\t\t}\n\n\t\tconst { responseHeaders, value: response } = await postJsonToApi({\n\t\t\turl: this.config.url({\n\t\t\t\tpath: '/embeddings',\n\t\t\t\tmodelId: this.modelId,\n\t\t\t}),\n\t\t\theaders: combineHeaders(this.config.headers(), headers),\n\t\t\tbody: {\n\t\t\t\tmodel: this.modelId,\n\t\t\t\tinput: values,\n\t\t\t\tencoding_format: 'float',\n\t\t\t\tdimensions: this.settings.dimensions,\n\t\t\t\tuser: this.settings.user,\n\t\t\t},\n\t\t\tfailedResponseHandler: createJsonErrorResponseHandler(\n\t\t\t\tthis.config.errorStructure ?? defaultGenApiErrorStructure,\n\t\t\t),\n\t\t\tsuccessfulResponseHandler: createJsonResponseHandler(\n\t\t\t\tgenapiTextEmbeddingResponseSchema,\n\t\t\t),\n\t\t\tabortSignal,\n\t\t\tfetch: this.config.fetch,\n\t\t})\n\n\t\treturn {\n\t\t\tembeddings: response.data.map(item => item.embedding),\n\t\t\tusage: response.usage\n\t\t\t\t? { tokens: response.usage.prompt_tokens }\n\t\t\t\t: undefined,\n\t\t\trawResponse: { headers: responseHeaders },\n\t\t}\n\t}\n}\n\n// minimal version of the schema, focussed on what is needed for the implementation\n// this approach limits breakages when the API changes and increases efficiency\nconst genapiTextEmbeddingResponseSchema = z.object({\n\tdata: z.array(z.object({ embedding: z.array(z.number()) })),\n\tusage: z.object({ prompt_tokens: z.number() }).nullish(),\n})\n","import { EmbeddingModelV1, LanguageModelV1, ProviderV1 } from '@ai-sdk/provider'\nimport { FetchFunction, withoutTrailingSlash } from '@ai-sdk/provider-utils'\nimport { GenApiChatLanguageModel } from './genapi-chat-language-model'\nimport { GenApiChatSettings } from './genapi-chat-settings'\nimport { GenApiCompletionLanguageModel } from './genapi-completion-language-model'\nimport { GenApiCompletionSettings } from './genapi-completion-settings'\nimport { GenApiEmbeddingModel } from './genapi-embedding-model'\nimport { GenApiEmbeddingSettings } from './genapi-embedding-settings'\n\nexport interface GenApiProvider<\n\tCHAT_MODEL_IDS extends string = string,\n\tCOMPLETION_MODEL_IDS extends string = string,\n\tEMBEDDING_MODEL_IDS extends string = string,\n> extends ProviderV1 {\n\t(\n\t\tmodelId: CHAT_MODEL_IDS,\n\t\tsettings?: GenApiChatSettings,\n\t): LanguageModelV1;\n\n\tlanguageModel (\n\t\tmodelId: CHAT_MODEL_IDS,\n\t\tsettings?: GenApiChatSettings,\n\t): LanguageModelV1;\n\n\tchatModel (\n\t\tmodelId: CHAT_MODEL_IDS,\n\t\tsettings?: GenApiChatSettings,\n\t): LanguageModelV1;\n\n\tcompletionModel (\n\t\tmodelId: COMPLETION_MODEL_IDS,\n\t\tsettings?: GenApiCompletionSettings,\n\t): LanguageModelV1;\n\n\ttextEmbeddingModel (\n\t\tmodelId: EMBEDDING_MODEL_IDS,\n\t\tsettings?: GenApiEmbeddingSettings,\n\t): EmbeddingModelV1<string>;\n}\n\nexport interface GenApiProviderSettings {\n\t/**\nBase URL for the API calls.\n\t */\n\tbaseURL?: string;\n\n\t/**\nProvider name.\n\t */\n\tname: string;\n\n\t/**\nAPI key for authenticating requests. If specified, adds an `Authorization`\nheader to request headers with the value `Bearer <apiKey>`. This will be added\nbefore any headers potentially specified in the `headers` option. Default is `process.env.GENAPI_API_KEY`\n\t */\n\tapiKey?: string;\n\n\t/**\nOptional custom headers to include in requests. These will be added to request headers\nafter any headers potentially added by use of the `apiKey` option.\n\t */\n\theaders?: Record<string, string>;\n\n\t/**\nOptional custom url query parameters to include in request urls.\n\t */\n\tqueryParams?: Record<string, string>;\n\n\t/**\nCustom fetch implementation. You can use it as a middleware to intercept requests,\nor to provide a custom fetch implementation for e.g. testing.\n\t */\n\tfetch?: FetchFunction;\n}\n\n/**\nCreate an GenApi provider instance.\n */\nexport function createGenApi<\n\tCHAT_MODEL_IDS extends string,\n\tCOMPLETION_MODEL_IDS extends string,\n\tEMBEDDING_MODEL_IDS extends string,\n> (\n\toptions: GenApiProviderSettings,\n): GenApiProvider<\n\tCHAT_MODEL_IDS,\n\tCOMPLETION_MODEL_IDS,\n\tEMBEDDING_MODEL_IDS\n> {\n\tconst baseURL = withoutTrailingSlash(options.baseURL || `https://api.gen-api.ru/api/v1/networks`)\n\tconst providerName = options.name\n\n\tinterface CommonModelConfig {\n\t\tprovider: string;\n\t\turl: ({ path }: { path: string }) => string;\n\t\theaders: () => Record<string, string>;\n\t\tfetch?: FetchFunction;\n\t}\n\n\tconst getHeaders = () => ({\n\t\t...(options.apiKey\n\t\t\t? { Authorization: `Bearer ${options.apiKey}` } :\n\t\t\t{ Authorization: `Bearer ${process.env.GENAPI_API_KEY}` }\n\t\t),\n\t\t...options.headers,\n\t})\n\n\tconst getCommonModelConfig = (modelType: string): CommonModelConfig => ({\n\t\tprovider: `${providerName}.${modelType}`,\n\t\turl: ({ path }) => {\n\t\t\tconst url = new URL(`${baseURL}${path}`)\n\t\t\tif (options.queryParams) {\n\t\t\t\turl.search = new URLSearchParams(options.queryParams).toString()\n\t\t\t}\n\t\t\treturn url.toString()\n\t\t},\n\t\theaders: getHeaders,\n\t\tfetch: options.fetch,\n\t})\n\n\tconst createLanguageModel = (\n\t\tmodelId: CHAT_MODEL_IDS,\n\t\tsettings: GenApiChatSettings = {},\n\t) => createChatModel(modelId, settings)\n\n\tconst createChatModel = (\n\t\tmodelId: CHAT_MODEL_IDS,\n\t\tsettings: GenApiChatSettings = {},\n\t) =>\n\t\tnew GenApiChatLanguageModel(modelId, settings, {\n\t\t\t...getCommonModelConfig('chat'),\n\t\t\tdefaultObjectGenerationMode: 'tool',\n\t\t})\n\n\tconst createCompletionModel = (\n\t\tmodelId: COMPLETION_MODEL_IDS,\n\t\tsettings: GenApiCompletionSettings = {},\n\t) =>\n\t\tnew GenApiCompletionLanguageModel(\n\t\t\tmodelId,\n\t\t\tsettings,\n\t\t\tgetCommonModelConfig('completion'),\n\t\t)\n\n\tconst createEmbeddingModel = (\n\t\tmodelId: EMBEDDING_MODEL_IDS,\n\t\tsettings: GenApiEmbeddingSettings = {},\n\t) =>\n\t\tnew GenApiEmbeddingModel(\n\t\t\tmodelId,\n\t\t\tsettings,\n\t\t\tgetCommonModelConfig('embedding'),\n\t\t)\n\n\tconst provider = (\n\t\tmodelId: CHAT_MODEL_IDS,\n\t\tsettings?: GenApiChatSettings,\n\t) => createLanguageModel(modelId, settings)\n\n\tprovider.languageModel = createLanguageModel\n\tprovider.chatModel = createChatModel\n\tprovider.completionModel = createCompletionModel\n\tprovider.textEmbeddingModel = createEmbeddingModel\n\n\treturn provider as GenApiProvider<\n\t\tCHAT_MODEL_IDS,\n\t\tCOMPLETION_MODEL_IDS,\n\t\tEMBEDDING_MODEL_IDS\n\t>\n}\n"],"mappings":"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","names":["import_provider","import_provider_utils","import_zod","import_provider","_a","toolCall","import_provider","import_provider_utils","import_zod","import_provider","import_provider","import_provider_utils","import_zod","import_provider_utils"]}